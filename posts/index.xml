<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on just some developer thoughts</title><link>https://nxyt.pl/blog/posts/</link><description>Recent content in Posts on just some developer thoughts</description><generator>Hugo -- gohugo.io</generator><language>pl-PL</language><lastBuildDate>Tue, 12 Dec 2023 09:03:20 -0800</lastBuildDate><atom:link href="https://nxyt.pl/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Perfect programming language</title><link>https://nxyt.pl/blog/posts/perfect_programming_language/</link><pubDate>Tue, 12 Dec 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/perfect_programming_language/</guid><description>Hello, as someone that likes to try out new things I&amp;rsquo;ve used plenty of programming languages, some popular, some niche and not widely known. This post sums up my experiences as wishlist of things I&amp;rsquo;d like my perfect language to have. This list is obviously subjective and there are some things that I might like, but you don&amp;rsquo;t - if that&amp;rsquo;s the case feel free to write comment with things you disagree with.</description></item><item><title>Why You should be using Nix instead of Dockerfiles</title><link>https://nxyt.pl/blog/posts/why_nix_instead_of_docker/</link><pubDate>Thu, 26 Oct 2023 13:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/why_nix_instead_of_docker/</guid><description>Lately I&amp;rsquo;ve had to move building and pushing docker images process to CI. To my surprise it wasn&amp;rsquo;t as straightforward as it should be. Building images on GitHub CI runner worked just fine, but my image registry had no SSL and adding &amp;lsquo;insecure&amp;rsquo; registry to docker can be a pain. Sure - I could write script that changes docker daemon.json configuration and restarts it, but it felt like a hack. I&amp;rsquo;ve also tried using podman and buildah, but both of them didn&amp;rsquo;t seem to get the job done in easy manner.</description></item><item><title>Typescript is overhyped</title><link>https://nxyt.pl/blog/posts/typescript_is_overused/</link><pubDate>Tue, 30 May 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/typescript_is_overused/</guid><description>Every time you ask someone what his favorite programming language is, chances are they’ll respond “Typescript!”. I think most people just don’t have much contact with wide range of technologies and will usually pick language they use the most as their ‘favorite’. It’s even more obvious in case of Typescript which with all its flaws is infinitely better than JavaScript, so in comparison it seems like the best thing in the world.</description></item><item><title>GraphQL vs REST, which one is better?</title><link>https://nxyt.pl/blog/posts/graphql_rest_comparison/</link><pubDate>Sat, 27 May 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/graphql_rest_comparison/</guid><description>As part of my bachelor thesis I&amp;rsquo;ve made some REST/GraphQL benchmarks that I&amp;rsquo;ve thought some of you might find interesting. Let&amp;rsquo;s start with short overview of both technologies.
REST Probably the most popular way of making API services right now. REST stands for Representational state transfer and APIs that follow REST rules are called &amp;ldquo;RESTful&amp;rdquo; APIs. In REST resource that you want to operate on is defined by some URI like http://your.</description></item><item><title>The Best Kubernetes Development Workflow</title><link>https://nxyt.pl/blog/posts/best-kubernetes-development-workflow/</link><pubDate>Sat, 13 May 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/best-kubernetes-development-workflow/</guid><description>At the start I want to point out that all opinions in this piece are just that - opinions. I&amp;rsquo;ve tried multiple workflows and all I want to do in this article is sharing what I&amp;rsquo;ve landed at and what difficulties I&amp;rsquo;ve had using other methods of developing in Kubernetes. My main motivation for writing it is sparing someone difficulties related with setting up dev environment. There are many solutions out there claiming that they make working with k8s easier, but with greater ease of development comes another layer of abstraction that sometimes might actually make things worse.</description></item><item><title>Why I migrated from WSL2 and Windows to Linux</title><link>https://nxyt.pl/blog/posts/why_i_migrated_to_linux/</link><pubDate>Wed, 03 May 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/why_i_migrated_to_linux/</guid><description>Hello everyone, this time I&amp;rsquo;ll share why I stopped using Windows with WSL2 (Windows subsystem for Linux) as my development environment and instead opted for dual boot setup (I&amp;rsquo;m keeping Windows just for few games that don&amp;rsquo;t work very well with Linux).
To make it more clear I should probably share my dev experience with WSL2 first.
My dev environment journey I&amp;rsquo;ve started programming a few years ago (probably around 2017) with Windows as my primary system.</description></item><item><title>How I've reduced CI rust tests duration 4x with caching and Nix!</title><link>https://nxyt.pl/blog/posts/how-i-reduced-ci-rust-tests-duration-35-times-with-caching-and-nix/</link><pubDate>Thu, 20 Apr 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/how-i-reduced-ci-rust-tests-duration-35-times-with-caching-and-nix/</guid><description>One of my project consists of backend (rust) split into many services and frontend made with Svelte. Sooner rather than later I found out that rust builds that we&amp;rsquo;re rather quick locally took ages in CI, resulting in poor CI feedback experience and test times exceeding 15 minutes. This post was made to help people struggling with similar issues.
Project Structure The way I structure my projects will influence some of the further solutions, so I thought it&amp;rsquo;s worthwhile sharing</description></item><item><title>How to use Nix to make reproducible dev environments</title><link>https://nxyt.pl/blog/posts/using-nix-for-dev-environment/</link><pubDate>Fri, 17 Mar 2023 09:03:20 -0800</pubDate><guid>https://nxyt.pl/blog/posts/using-nix-for-dev-environment/</guid><description>Perhaps just like me, you see value in making easily reproducible dev environments. Wouldn&amp;rsquo;t it be great if you could have projects with different versions of dependencies that anyone could just jump right into, type command or two and have everything necessary for contributing?
Well, I think it&amp;rsquo;s something that everyone should take into consideration. Reproducible dev environments have one more pro - there are self-documenting state of your project. You can look into things your dev env provides you to know which programming languages and tools the project is using.</description></item></channel></rss>