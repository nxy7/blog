<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>golang on just some developer thoughts</title><link>https://nxyt.pl/blog/tags/golang/</link><description>Recent content in golang on just some developer thoughts</description><generator>Hugo -- gohugo.io</generator><language>pl-PL</language><lastBuildDate>Wed, 20 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nxyt.pl/blog/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang vs Rust</title><link>https://nxyt.pl/blog/posts/go_vs_rust/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://nxyt.pl/blog/posts/go_vs_rust/</guid><description>Yes, it&amp;rsquo;s another one of those ðŸ˜ˆ My programming journey started few years ago with typescript (unsurprisingly), but sooner rather than later I&amp;rsquo;ve developed a view that typescript doesn&amp;rsquo;t have any advantages on the backend. Seriously, does typescript have any advantages over alternatives in this space? It&amp;rsquo;s interpreted, so we need to package runtime with our code to get it to work, even if it doesn&amp;rsquo;t have benefits of compiled languages we need compile step, it doesn&amp;rsquo;t have good native tooling (you need 3rd party projects for things like formatting), it&amp;rsquo;s not very safe language (f.</description></item></channel></rss>